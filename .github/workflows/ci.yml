name: CI Pipeline

on:
  push:
    branches:
      - master
      - develop
      - 'release/**'
      - 'feature/**'
      - 'hotfix/**'
      - 'bugfix/**'
    paths-ignore:
      - 'README.md'
      - LICENSE
      - '.travis.yml'
      - '.azure-pipeline.yml'
      - 'templates/azure/*'

  pull_request:
    branches:
      - master
      - develop
    paths-ignore:
      - 'README.md'
      - LICENSE
      - '.travis.yml'
      - '.azure-pipeline.yml'
      - 'templates/azure/*'

env:
  appname: 'mylabs-go'

defaults:
  run:
    shell: bash

jobs:

  build:
    name: Build
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        operating-system: [ ubuntu-latest, macos-latest, windows-latest ]

    steps:

      - name: Set up Go 1.14
        uses: actions/setup-go@v1
        with:
          go-version: 1.14
        id: go

      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Create bin dir
        run: mkdir -p bin

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.4
        with:
          versionSpec: '5.3.x'

      - name: Use GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.4

      - name: Build
        run: |
          set -e -x
          GITBRANCH=`git rev-parse --abbrev-ref HEAD | cut -f1 -d'/'`
          make build APP_NAME=${{ env.appname }} GIT_BRANCH_NAME=${{ steps.gitversion.outputs.branchName }} APP_VERSION=${{ steps.gitversion.outputs.semVer }}

      - uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.operating-system }}
          path: bin

  test:
    name: Run Tests
    needs: [ build ]
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        operating-system: [ubuntu-latest]

    env:
      SHIFTLEFT_ORG_ID: "${{ secrets.SHIFT_LEFT_ORG }}"
      SHIFTLEFT_ACCESS_TOKEN: "${{ secrets.SHIFT_LEFT_TOKEN }}"

    steps:

      - name: Set up Go 1.14
        uses: actions/setup-go@v1
        with:
          go-version: 1.14
        id: go

      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Create bin dir
        run: mkdir -p bin

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.4
        with:
          versionSpec: '5.3.x'

      - name: Use GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.4

      - name: Build
        run: |
          set -e -x
          GITBRANCH=`git rev-parse --abbrev-ref HEAD | cut -f1 -d'/'`
          make build APP_NAME=${{ env.appname }} GIT_BRANCH_NAME=${{ steps.gitversion.outputs.branchName }} APP_VERSION=${{ steps.gitversion.outputs.semVer }}

      - name: Run Vulnerability Checks
        run: |
          set -e -x
          curl https://cdn.shiftleft.io/download/sl > $GITHUB_WORKSPACE/sl && chmod a+rx $GITHUB_WORKSPACE/sl

          echo "Sleeping for 60 seconds to avoid concurent request to ShiftLeft as they are rate limited."
          sleep 60

          $GITHUB_WORKSPACE/sl analyze --wait --tag branch=${GITHUB_REF##*/} --tag app.group=MyLabs --tag app.language=go --app MyLabs-G0 --cpg --go ./...

      - name : Run Code Quality Checks
        run: |
          set -e -x
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin latest

          $(go env GOPATH)/bin/golangci-lint run

      - name: Run Unit Tests
        run: make test

  createrelease:
    if: ${{ startsWith(github.ref, 'refs/heads/master') || startsWith(github.ref, 'refs/heads/release') || startsWith(github.ref, 'refs/heads/hotfix') }}
    name: Create Release
    needs: [ test ]
    runs-on: [ ubuntu-latest ]
    steps:
      - name: Set up Go 1.14
        id: go
        uses: actions/setup-go@v1
        with:
          go-version: 1.14

      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.4
        with:
          versionSpec: '5.3.x'

      - name: Use GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.4

      - name: Build
        run: |
          set -e -x
          GITBRANCH=`git rev-parse --abbrev-ref HEAD | cut -f1 -d'/'`
          make build APP_NAME=${{ env.appname }} GIT_BRANCH_NAME=${{ steps.gitversion.outputs.branchName }} APP_VERSION=${{ steps.gitversion.outputs.semVer }}

      - name: Set Release Name
        id: set-release-name
        run: |
          set -e -x
          OS=`go env GOOS`
          ARCH=`go env GOARCH`
          VERSION=`bin/${{ env.appname }}_$OS\_$ARCH version`

          GIT_BRANCH=`git rev-parse --abbrev-ref HEAD | cut -f1 -d'/'`

          echo "::set-output name=RELEASE_NAME::$VERSION"

          if [ $GIT_BRANCH == 'master' ]; then
            echo "::set-output name=PRERELEASE::false"
          else
            echo "::set-output name=PRERELEASE::true"
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.set-release-name.outputs.RELEASE_NAME }}
          release_name: v${{ steps.set-release-name.outputs.RELEASE_NAME }}
          draft: false
          prerelease: ${{ steps.set-release-name.outputs.PRERELEASE }}

      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt

      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt

  build_and_release:
    if: ${{ startsWith(github.ref, 'refs/heads/master') || startsWith(github.ref, 'refs/heads/release') || startsWith(github.ref, 'refs/heads/hotfix') }}
    needs: [ createrelease ]
    name: Build and release
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        operating-system: [ ubuntu-latest, macos-latest, windows-latest ]

    steps:
      - name: Set up Go 1.14
        uses: actions/setup-go@v1
        with:
          go-version: 1.14
        id: go

      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.4
        with:
          versionSpec: '5.3.x'

      - name: Use GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.4

      - name: Build
        run: |
          set -e -x
          GITBRANCH=`git rev-parse --abbrev-ref HEAD | cut -f1 -d'/'`
          make build APP_NAME=${{ env.appname }} GIT_BRANCH_NAME=${{ steps.gitversion.outputs.branchName }} APP_VERSION=${{ steps.gitversion.outputs.semVer }}

      - name: Get/Set OS, Arch & App File Name
        id: get-os-arch
        run: |
          set -e -x
          OS=`go env GOOS`
          ARCH=`go env GOARCH`

          echo "::set-output name=OS::$OS"

          if [ $OS == 'windows' ]; then
            echo ::set-output name=app_file_name::${{ env.appname }}_$OS\_$ARCH.exe
          else
            echo ::set-output name=app_file_name::${{ env.appname }}_$OS\_$ARCH
          fi

      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url

      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          set -e -x
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: bin/${{ steps.get-os-arch.outputs.app_file_name }}
          asset_name: ${{ steps.get-os-arch.outputs.app_file_name }}
          asset_content_type: application/zip
